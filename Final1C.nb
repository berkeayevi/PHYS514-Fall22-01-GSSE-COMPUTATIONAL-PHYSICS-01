(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    105323,       2111]
NotebookOptionsPosition[    104550,       2089]
NotebookOutlinePosition[    104993,       2106]
CellTagsIndexPosition[    104950,       2103]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
expansion P= \
C*(((u/D)^(1/q))*(2*((u/D)^(1/q))^2-3)*(((u/D)^(1/q))^2+1)^(1/2)+3*1/sinh(((u/\
D)^(1/q)))), ((u/D)^(1/q)) <<1\
\>", "WolframAlphaLong",
 CellChangeTimes->{{3.8826889410082536`*^9, 3.8826890380626173`*^9}, {
   3.88268907323314*^9, 3.8826891128152404`*^9}, {3.8826891513769298`*^9, 
   3.882689157735353*^9}, {3.882689204928527*^9, 3.8826892607669897`*^9}, {
   3.8826892986006565`*^9, 3.882689345807584*^9}, {3.8826905307759967`*^9, 
   3.88269061837436*^9}, {3.8826906612963724`*^9, 3.882690816326373*^9}, {
   3.8826909670325603`*^9, 3.882690987613959*^9}, 3.8826910781778584`*^9},
 CellLabel->"In[48]:=",ExpressionUUID->"4af2b781-e6d5-4960-bbe8-630ad09f9305"],

Cell[BoxData[
 RowBox[{
  NamespaceBox["WolframAlphaQueryResults",
   DynamicModuleBox[{Typeset`q$$ = 
    "expansion P= \
C*(((u/D)^(1/q))*(2*((u/D)^(1/q))^2-3)*(((u/D)^(1/q))^2+1)^(1/2)+3*1/sinh(((u/\
D)^(1/q)))), ((u/D)^(1/q)) <<1", Typeset`opts$$ = {
    AppearanceElements -> {
      "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
       "Sources"}, Asynchronous -> All, 
     TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
     Method -> {
      "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
       "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
    "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
     "Sources"}, Typeset`pod1$$ = XMLElement[
    "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
      "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
      XMLElement["subpod", {"title" -> ""}, {
        XMLElement[
        "minput", {}, {
         "Expand[P == C ((u/D)^(1/q) (2 ((u/D)^(1/q))^2 - 3) (((u/D)^(1/q))^2 \
+ 1)^(1/2) + 3 (1/Sinh[(u/D)^(1/q)])), BitShiftLeft[(u/D)^(1/q), 1]]"}], 
        XMLElement["cell", {"compressed" -> False, "string" -> True}, {
          Cell[
           BoxData[
            FormBox[
             TagBox[
              RowBox[{
                TagBox[
                 StyleBox[
                 "Expand", FontFamily -> "Roboto", 
                  FontSize -> -1 + Inherited], HoldForm], "[", 
                RowBox[{
                  RowBox[{"P", "\[LongEqual]", 
                    TagBox[
                    RowBox[{"C", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RadicalBox[
                    FractionBox["u", "D"], "q"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    SuperscriptBox[
                    RadicalBox[
                    FractionBox["u", "D"], "q"], "2"]}], "-", "3"}], ")"}], 
                    " ", 
                    SqrtBox[
                    RowBox[{
                    SuperscriptBox[
                    RadicalBox[
                    FractionBox["u", "D"], "q"], "2"], "+", "1"}]]}], "+", 
                    RowBox[{"3", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.6]], 
                    TagBox[
                    FractionBox["1", 
                    RowBox[{"sinh", "(", 
                    RadicalBox[
                    FractionBox["u", "D"], "q"], ")"}]], 
                    PolynomialForm[#, TraditionalOrder -> False]& ]}]}], 
                    ")"}]}], Identity]}], ",", 
                  TemplateBox[{"\[LessLess]", "\"\[LessLess]\"", 
                    RowBox[{"(", "\[NoBreak]", 
                    TagBox[
                    RadicalBox[
                    FractionBox["u", "D"], "q"], HoldForm], "\[NoBreak]", 
                    ")"}], 
                    TagBox["1", HoldForm]}, "RowWithSeparators"]}], "]"}], 
              PolynomialForm[#, TraditionalOrder -> False]& ], 
             TraditionalForm]], "Output", {
           Background -> None, 
            GraphicsBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
              DefaultAxesStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
              DefaultTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
            Graphics3DBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
           NumberPoint -> ".", CellSize -> {550, Automatic}, 
           AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
           RenderingOptions -> {
            "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
        XMLElement[
        "dataformats", {}, {
         "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
      XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
        XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
      XMLElement["infos", {"count" -> "2"}, {
        XMLElement[
        "info", {"text" -> "sinh(x) is the hyperbolic sine function"}, {
          XMLElement[
          "link", {
           "url" -> "http://reference.wolfram.com/language/ref/Sinh.html", 
            "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
          XMLElement[
          "link", {
           "url" -> "http://functions.wolfram.com/ElementaryFunctions/Sinh", 
            "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
          XMLElement[
          "link", {
           "url" -> "http://mathworld.wolfram.com/HyperbolicSine.html", 
            "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
        XMLElement[
        "info", {
         "text" -> 
          "n<<k is the leftward arithmetic shift of the bits of n by k \
places"}, {
          XMLElement[
          "link", {
           "url" -> 
            "http://reference.wolfram.com/language/ref/BitShiftLeft.html", 
            "text" -> "Documentation", "title" -> "Mathematica"}, {}]}]}]}], 
    Typeset`pod2$$ = XMLElement[
    "pod", {"title" -> "Result", "scanner" -> "Identity", "id" -> "Result", 
      "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
      "true"}, {
      XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
        XMLElement["cell", {"compressed" -> False, "string" -> True}, {
          Cell[
           BoxData[
            FormBox[
             RowBox[{"P", "\[LongEqual]", 
               TagBox[
                RowBox[{"C", " ", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    SqrtBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["u", "D"], ")"}], 
                    RowBox[{"2", "/", "q"}]], "+", "1"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["u", "D"], ")"}], 
                    RowBox[{"2", "/", "q"}]]}], "-", "3"}], ")"}], " ", 
                    RadicalBox[
                    FractionBox["u", "D"], "q"]}], "+", 
                    RowBox[{"3", " ", 
                    RowBox[{"csch", "(", 
                    RadicalBox[
                    FractionBox["u", "D"], "q"], ")"}]}]}], ")"}]}], 
                Identity]}], TraditionalForm]], "Output", {
           Background -> None, 
            GraphicsBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
              DefaultAxesStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
              DefaultTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
            Graphics3DBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
           NumberPoint -> ".", CellSize -> {550, Automatic}, 
           AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
           RenderingOptions -> {
            "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
        XMLElement[
        "dataformats", {}, {
         "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
      XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
        XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
      XMLElement["infos", {"count" -> "1"}, {
        XMLElement[
        "info", {"text" -> "csch(x) is the hyperbolic cosecant function"}, {
          XMLElement[
          "link", {
           "url" -> "http://reference.wolfram.com/language/ref/Csch.html", 
            "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
          XMLElement[
          "link", {
           "url" -> "http://functions.wolfram.com/ElementaryFunctions/Csch", 
            "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
          XMLElement[
          "link", {
           "url" -> "http://mathworld.wolfram.com/HyperbolicCosecant.html", 
            "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
    Typeset`pod3$$ = XMLElement[
    "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
      "Derivative", "position" -> "300", "error" -> "false", "numsubpods" -> 
      "1"}, {
      XMLElement["subpod", {"title" -> ""}, {
        XMLElement[
        "minput", {}, {
         "D[P == C ((u/D)^q^(-1) Sqrt[1 + (u/D)^(2/q)] (-3 + 2 (u/D)^(2/q)) + \
3 Csch[(u/D)^q^(-1)]), u]"}], 
        XMLElement["cell", {"compressed" -> False, "string" -> True}, {
          Cell[
           BoxData[
            FormBox[
             RowBox[{
               RowBox[{
                 TagBox[
                  FractionBox["\[PartialD]", 
                   RowBox[{"\"\[PartialD]\"", "\[InvisibleSpace]", "u"}]], 
                  $CellContext`TagBoxWrapper[
                  "StringBoxes" -> 
                   RowBox[{"d/d", "\[InvisibleSpace]", "u"}]]], 
                 "\[InvisibleSpace]", 
                 RowBox[{"(", 
                   TagBox[
                    TagBox[
                    RowBox[{
                    StyleBox[
                    "Expand", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{
                    RowBox[{"P", "\[LongEqual]", 
                    RowBox[{"C", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RadicalBox[
                    FractionBox["u", "D"], "q"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    SuperscriptBox[
                    RadicalBox[
                    FractionBox["u", "D"], "q"], "2"]}], "-", "3"}], ")"}], 
                    " ", 
                    SqrtBox[
                    RowBox[{
                    SuperscriptBox[
                    RadicalBox[
                    FractionBox["u", "D"], "q"], "2"], "+", "1"}]]}], "+", 
                    FractionBox["3", 
                    RowBox[{"sinh", "(", 
                    RadicalBox[
                    FractionBox["u", "D"], "q"], ")"}]]}], ")"}]}]}], ",", 
                    TemplateBox[{"\[LessLess]", "\"\[LessLess]\"", 
                    RowBox[{"(", "\[NoBreak]", 
                    TagBox[
                    RadicalBox[
                    FractionBox["u", "D"], "q"], HoldForm], "\[NoBreak]", 
                    ")"}], 
                    TagBox["1", HoldForm]}, "RowWithSeparators"]}], "]"}], 
                    HoldForm], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
               "\[LongEqual]", 
               FractionBox[
                RowBox[{"C", " ", 
                  RadicalBox[
                   FractionBox["u", "D"], "q"], " ", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"8", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["u", "D"], ")"}], 
                    RowBox[{"4", "/", "q"}]]}], "-", 
                    RowBox[{"3", " ", 
                    SqrtBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["u", "D"], ")"}], 
                    RowBox[{"2", "/", "q"}]], "+", "1"}]], " ", 
                    RowBox[{"coth", "(", 
                    RadicalBox[
                    FractionBox["u", "D"], "q"], ")"}], " ", 
                    RowBox[{"csch", "(", 
                    RadicalBox[
                    FractionBox["u", "D"], "q"], ")"}]}], "-", "3"}], ")"}]}], 
                RowBox[{"q", " ", "u", " ", 
                  SqrtBox[
                   RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["u", "D"], ")"}], 
                    RowBox[{"2", "/", "q"}]], "+", "1"}]]}]]}], 
             TraditionalForm]], "Output", {
           Background -> None, 
            GraphicsBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
              DefaultAxesStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
              DefaultTicksStyle -> 
              Directive[
               FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
            Graphics3DBoxOptions -> {
             DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
           NumberPoint -> ".", CellSize -> {550, Automatic}, 
           AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
           RenderingOptions -> {
            "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
        XMLElement[
        "dataformats", {}, {
         "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]\
}], 
      XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
        XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
      XMLElement["states", {"count" -> "1"}, {
        XMLElement[
        "state", {
         "name" -> "Step-by-step solution", "input" -> 
          "Derivative__Step-by-step solution", "stepbystep" -> "true", 
          "buttonstyle" -> "StepByStepSolution"}, {}]}], 
      XMLElement["infos", {"count" -> "1"}, {
        XMLElement[
        "info", {"text" -> "coth(x) is the hyperbolic cotangent function"}, {
          XMLElement[
          "link", {
           "url" -> "http://reference.wolfram.com/language/ref/Coth.html", 
            "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
          XMLElement[
          "link", {
           "url" -> "http://functions.wolfram.com/ElementaryFunctions/Coth", 
            "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
          XMLElement[
          "link", {
           "url" -> "http://mathworld.wolfram.com/HyperbolicCotangent.html", 
            "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
    Typeset`pod4$$, Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, 
    Typeset`pod8$$, Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, 
    Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, 
    Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, 
    Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, 
    Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, 
    Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
    Typeset`pod32$$, Typeset`pod33$$, Typeset`aux1$$ = {
    True, False, {False}, True}, Typeset`aux2$$ = {
    True, False, {False}, True}, Typeset`aux3$$ = {
    True, False, {False}, True}, Typeset`aux4$$ = {
    True, False, {False}, True}, Typeset`aux5$$ = {
    True, False, {False}, True}, Typeset`aux6$$ = {
    True, False, {False}, True}, Typeset`aux7$$ = {
    True, False, {False}, True}, Typeset`aux8$$ = {
    True, False, {False}, True}, Typeset`aux9$$ = {
    True, False, {False}, True}, Typeset`aux10$$ = {
    True, False, {False}, True}, Typeset`aux11$$ = {
    True, False, {False}, True}, Typeset`aux12$$ = {
    True, False, {False}, True}, Typeset`aux13$$ = {
    True, False, {False}, True}, Typeset`aux14$$ = {
    True, False, {False}, True}, Typeset`aux15$$ = {
    True, False, {False}, True}, Typeset`aux16$$ = {
    True, False, {False}, True}, Typeset`aux17$$ = {
    True, False, {False}, True}, Typeset`aux18$$ = {
    True, False, {False}, True}, Typeset`aux19$$ = {
    True, False, {False}, True}, Typeset`aux20$$ = {
    True, False, {False}, True}, Typeset`aux21$$ = {
    True, False, {False}, True}, Typeset`aux22$$ = {
    True, False, {False}, True}, Typeset`aux23$$ = {
    True, False, {False}, True}, Typeset`aux24$$ = {
    True, False, {False}, True}, Typeset`aux25$$ = {
    True, False, {False}, True}, Typeset`aux26$$ = {
    True, False, {False}, True}, Typeset`aux27$$ = {
    True, False, {False}, True}, Typeset`aux28$$ = {
    True, False, {False}, True}, Typeset`aux29$$ = {
    True, False, {False}, True}, Typeset`aux30$$ = {
    True, False, {False}, True}, Typeset`aux31$$ = {
    True, False, {False}, True}, Typeset`aux32$$ = {
    True, False, {False}, True}, Typeset`aux33$$ = {
    True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
    Typeset`nonpods$$ = {
     XMLElement["assumptions", {"count" -> "1"}, {
       XMLElement[
       "assumption", {
        "type" -> "Clash", "word" -> "C", "template" -> 
         "Assuming \"C\" is a variable${separator}Use as ${desc} instead", 
         "count" -> "2", "pulldown" -> "false", "default" -> 
         "{\"C\", \"C\"} -> {\"Variable\", \"dflt\"}"}, {
         XMLElement[
         "value", {
          "name" -> "Variable", "desc" -> "a variable", "input" -> 
           "{\"C\", \"C\"} -> {\"Variable\"}"}, {}], 
         XMLElement[
         "value", {
          "name" -> "Unit", "desc" -> "a unit", "input" -> 
           "{\"C\", \"C\"} -> {\"Unit\"}"}, {}]}]}]}, Typeset`initdone$$ = 
    FrontEnd`SuppressEvaluationHash[True], 
    Typeset`queryinfo$$ = {{
     "success" -> "true", "error" -> 
      "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> 
      "preserve", "numpods" -> "3", "datatypes" -> "", "timedout" -> 
      "Reduce,GlobalExtrema,Inequality2D,Geometry,Inequality,Simplification,\
ImplicitDifferentiation,FredholmIntegralEquation", "timedoutpods" -> "", 
      "timing" -> "5.824", "parsetiming" -> "2.533", "parsetimedout" -> 
      "false", "recalculate" -> 
      "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa56441h84cehb6bde4d17000064g5850cfeg0g12g3142019838491228908", "id" -> 
      "MSP56451h84cehb6bde4d17000067h22f2aab262da6", "host" -> 
      "https://www6b3.wolframalpha.com", "server" -> "10", "related" -> 
      "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa56461h84cehb6bde4d17000044725d425h7h35193142019838491228908", "version" -> 
      "2.6", "inputstring" -> 
      "expansion P= \
C*(((u/D)^(1/q))*(2*((u/D)^(1/q))^2-3)*(((u/D)^(1/q))^2+1)^(1/2)+3*1/sinh(((u/\
D)^(1/q)))), ((u/D)^(1/q)) <<1"}, {
     "success" -> "true", "error" -> 
      "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> 
      "preserve", "numpods" -> "0", "datatypes" -> "", "timedout" -> 
      "Reduce,GlobalExtrema,Inequality2D,Geometry,Inequality,Simplification,\
ImplicitDifferentiation,FredholmIntegralEquation", "timedoutpods" -> "", 
      "timing" -> "5.072", "parsetimedout" -> "false", "recalculate" -> "", 
      "id" -> "", "parseidserver" -> "3", "host" -> 
      "https://www6b3.wolframalpha.com", "server" -> "3", "related" -> "", 
      "version" -> "2.6", "inputstring" -> 
      "expansion P= \
C*(((u/D)^(1/q))*(2*((u/D)^(1/q))^2-3)*(((u/D)^(1/q))^2+1)^(1/2)+3*1/sinh(((u/\
D)^(1/q)))), ((u/D)^(1/q)) <<1"}}, Typeset`sessioninfo$$ = {
    "TimeZone" -> 3., 
     "Date" -> {2023, 1, 14, 16, 16, 34.8207095`9.294412512395255}, "Line" -> 
     48, "SessionID" -> 24532905973993933097}, Typeset`showpods$$ = {1, 2, 3},
     Typeset`failedpods$$ = {4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
     18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}, 
    Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
    "expansion P= \
C*(((u/D)^(1/q))*(2*((u/D)^(1/q))^2-3)*(((u/D)^(1/q))^2+1)^(1/2)+3*1/sinh(((u/\
D)^(1/q)))), ((u/D)^(1/q)) <<1"}, 
    DynamicBox[ToBoxes[
      AlphaIntegration`FormatAlphaResults[
       Dynamic[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$}, Typeset`chosen$$, Typeset`open$$, 
         Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
     ImageSizeCache->{1364., {217.3544921875, 222.6455078125}},
     TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
    DynamicModuleValues:>{},
    Initialization:>If[
      And[
       Not[Typeset`initdone$$ === True], 
       Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
      Null; AlphaIntegration`DoAsyncInitialization[
        Hold[{
         2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
           Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
           Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
           Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$,
            Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, 
           Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$,
            Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, 
           Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$,
            Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$}, {
          Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
           Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
           Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
           Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$,
            Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, 
           Typeset`aux20$$, Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$,
            Typeset`aux24$$, Typeset`aux25$$, Typeset`aux26$$, 
           Typeset`aux27$$, Typeset`aux28$$, Typeset`aux29$$, Typeset`aux30$$,
            Typeset`aux31$$, Typeset`aux32$$, Typeset`aux33$$}, 
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
          Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
          Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
          Typeset`newq$$, 
          "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa56441h84cehb6bde4d17000064g5850cfeg0g12g3142019838491228908", 
          Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
      Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
    SynchronousInitialization->False],
   BaseStyle->{Deployed -> True},
   DeleteWithContents->True,
   Editable->False,
   SelectWithContents->True], "e"}]], "Print", "WolframAlphaFullOutput",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{3.882690994907308*^9, 
  3.882691120448011*^9},ExpressionUUID->"2fbc5639-2f56-47bc-916a-\
afdb747078ff"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
expand P= C*((x)*(2*(x)^2-3)*((x)^2+1)^(1/2)+3*(sinh(x))^-1) where x<<1\
\>", "WolframAlphaLong",
 CellChangeTimes->{{3.882691068470393*^9, 3.882691150302644*^9}, 
   3.882691181184596*^9, {3.882691226384474*^9, 3.8826912776060925`*^9}, {
   3.882691336530302*^9, 3.8826913729576483`*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"3d2a29d1-39cb-4d53-aff2-0bee4d84e37e"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "expand P= C*((x)*(2*(x)^2-3)*((x)^2+1)^(1/2)+3*(sinh(x))^-1) where x<<1", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "TrigExpand[P == C (x (2 x^2 - 3) (x^2 + 1)^(1/2) + 3/Sinh[x])]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"expand\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    StyleBox[
                    RowBox[{"P", "\[LongEqual]", 
                    RowBox[{"C", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    FormBox["x", TraditionalForm], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    SuperscriptBox[
                    FormBox["x", TraditionalForm], "2"]}], "-", "3"}], ")"}], 
                    " ", 
                    SqrtBox[
                    RowBox[{
                    SuperscriptBox[
                    FormBox["x", TraditionalForm], "2"], "+", "1"}]]}], "+", 
                    FractionBox["3", 
                    RowBox[{"sinh", "(", 
                    FormBox["x", TraditionalForm], ")"}]]}], ")"}]}]}], 
                    ScriptLevel -> 0, StripOnInput -> False]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {"text" -> "sinh(x) is the hyperbolic sine function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Sinh.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Sinh", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/HyperbolicSine.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Results", "scanner" -> "Expand", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "TrigExpand[P == C (3 Csch[x] + x Sqrt[1 + x^2] (-3 + 2 x^2))]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"P", "\[LongEqual]", 
              RowBox[{
                RowBox[{"2", " ", "C", " ", 
                  SqrtBox[
                   RowBox[{
                    SuperscriptBox[
                    FormBox["x", TraditionalForm], "2"], "+", "1"}]], " ", 
                  SuperscriptBox[
                   FormBox["x", TraditionalForm], "3"]}], "-", 
                RowBox[{"3", " ", "C", " ", 
                  SqrtBox[
                   RowBox[{
                    SuperscriptBox[
                    FormBox["x", TraditionalForm], "2"], "+", "1"}]], " ", 
                  FormBox["x", TraditionalForm]}], "+", 
                RowBox[{"3", " ", "C", " ", 
                  RowBox[{"csch", "(", 
                    FormBox["x", TraditionalForm], ")"}]}]}]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"P", "\[LongEqual]", 
              RowBox[{
                FractionBox["1", "2"], " ", "C", " ", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"2", " ", 
                    SqrtBox[
                    RowBox[{
                    SuperscriptBox[
                    FormBox["x", TraditionalForm], "2"], "+", "1"}]], " ", 
                    SuperscriptBox[
                    FormBox["x", TraditionalForm], "3"], " ", 
                    RowBox[{"sinh", "(", 
                    FormBox["x", TraditionalForm], ")"}]}], "-", 
                    RowBox[{"3", " ", 
                    SqrtBox[
                    RowBox[{
                    SuperscriptBox[
                    FormBox["x", TraditionalForm], "2"], "+", "1"}]], " ", 
                    FormBox["x", TraditionalForm], " ", 
                    RowBox[{"sinh", "(", 
                    FormBox["x", TraditionalForm], ")"}]}], "+", "3"}], ")"}],
                 " ", 
                RowBox[{"csch", "(", 
                  FractionBox[
                   FormBox["x", TraditionalForm], "2"], ")"}], " ", 
                RowBox[{"sech", "(", 
                  FractionBox[
                   FormBox["x", TraditionalForm], "2"], ")"}]}]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Result__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement[
       "info", {"text" -> "csch(x) is the hyperbolic cosecant function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Csch.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Csch", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/HyperbolicCosecant.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {"text" -> "sech(x) is the hyperbolic secant function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Sech.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Sech", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/HyperbolicSecant.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Series expansion at C = 0", "scanner" -> "Expand", 
     "id" -> "SeriesExpansionAtC9780 = 0", "position" -> "300", "error" -> 
     "false", "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[C (3 Csch[x] + x Sqrt[1 + x^2] (-3 + 2 x^2)), {C, 0, 5}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"C", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    FormBox["x", TraditionalForm], " ", 
                    SqrtBox[
                    RowBox[{
                    SuperscriptBox[
                    FormBox["x", TraditionalForm], "2"], "+", "1"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    SuperscriptBox[
                    FormBox["x", TraditionalForm], "2"]}], "-", "3"}], 
                    ")"}]}], "+", 
                    RowBox[{"3", " ", 
                    RowBox[{"csch", "(", 
                    FormBox["x", TraditionalForm], ")"}]}]}], ")"}]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["C", "6"], ")"}], 
                    SeriesData[$CellContext`C9780, 0, {}, 1, 6, 1], Editable -> 
                    False]}], 
                    RowBox[{"SeriesData", "[", 
                    RowBox[{"C9780", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"3", " ", 
                    RowBox[{"Csch", "[", 
                    
                    RowBox[{"CalculateParse`Content`Calculate`SessionSymbol", 
                    "[", "\"x\"", "]"}], "]"}]}], "+", 
                    RowBox[{
                    
                    RowBox[{"CalculateParse`Content`Calculate`SessionSymbol", 
                    "[", "\"x\"", "]"}], " ", 
                    SqrtBox[
                    RowBox[{"1", "+", 
                    SuperscriptBox[
                    
                    RowBox[{"CalculateParse`Content`Calculate`SessionSymbol", 
                    "[", "\"x\"", "]"}], "2"]}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "3"}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox[
                    
                    RowBox[{"CalculateParse`Content`Calculate`SessionSymbol", 
                    "[", "\"x\"", "]"}], "2"]}]}], ")"}]}]}], "}"}], ",", "1",
                     ",", "6", ",", "1"}], "]"}]}, "SeriesData", 
                    DisplayFunction -> (#& ), 
                    InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"converges everywhere\"", 
                    "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "SeriesExpansionAtC9780 = 0__More terms"}, {}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Series expansion at C = \[Infinity]", "scanner" -> 
     "Expand", "id" -> "SeriesExpansionAtC9780 =Infinity", "position" -> 
     "400", "error" -> "false", "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[C (3 Csch[x] + x Sqrt[1 + x^2] (-3 + 2 x^2)), {C, Infinity, \
5}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"C", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    FormBox["x", TraditionalForm], " ", 
                    SqrtBox[
                    RowBox[{
                    SuperscriptBox[
                    FormBox["x", TraditionalForm], "2"], "+", "1"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    SuperscriptBox[
                    FormBox["x", TraditionalForm], "2"]}], "-", "3"}], 
                    ")"}]}], "+", 
                    RowBox[{"3", " ", 
                    RowBox[{"csch", "(", 
                    FormBox["x", TraditionalForm], ")"}]}]}], ")"}]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "C"], ")"}], "6"], ")"}], 
                    SeriesData[$CellContext`C9780, 
                    DirectedInfinity[1], {}, -1, 6, 1], Editable -> False]}], 
                    RowBox[{"SeriesData", "[", 
                    RowBox[{"C9780", ",", "\[Infinity]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"3", " ", 
                    RowBox[{"Csch", "[", 
                    
                    RowBox[{"CalculateParse`Content`Calculate`SessionSymbol", 
                    "[", "\"x\"", "]"}], "]"}]}], "+", 
                    RowBox[{
                    
                    RowBox[{"CalculateParse`Content`Calculate`SessionSymbol", 
                    "[", "\"x\"", "]"}], " ", 
                    SqrtBox[
                    RowBox[{"1", "+", 
                    SuperscriptBox[
                    
                    RowBox[{"CalculateParse`Content`Calculate`SessionSymbol", 
                    "[", "\"x\"", "]"}], "2"]}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "3"}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox[
                    
                    RowBox[{"CalculateParse`Content`Calculate`SessionSymbol", 
                    "[", "\"x\"", "]"}], "2"]}]}], ")"}]}]}], "}"}], ",", 
                    RowBox[{"-", "1"}], ",", "6", ",", "1"}], "]"}]}, 
                    "SeriesData", DisplayFunction -> (#& ), 
                    InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"converges everywhere away from origin\"", "\[NoBreak]",
                     "\")\""}], TraditionalForm]]], {
                    FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "SeriesExpansionAtC9780 =Infinity__More terms"}, {}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Approximations about C = 0 up to order 1", "scanner" -> 
     "Expand", "id" -> "PlotOfSeriesExpansionAtC9780 = 0", "position" -> 
     "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 FormBox[
                  StyleBox[
                   
                   DynamicModuleBox[{
                    CalculateUtilities`GraphicsUtilities`Private`max6751$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min6750$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                    Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                    Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min6750$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max6751$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                    Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = 
                    False, Typeset`skipInitDone$$ = False, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2488672$\
$ = False, CalculateUtilities`GraphicsUtilities`Private`min6750$2488677$$ = 0,
                     CalculateUtilities`GraphicsUtilities`Private`max6751$\
2488678$$ = 0}, 
                    DynamicBox[
                    Manipulate`ManipulateBoxes[
                    2, TraditionalForm, 
                    "Variables" :> {
                    CalculateUtilities`GraphicsUtilities`Private`max6751$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min6750$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                    "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2488672$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min6750$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min6750$\
2488677$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max6751$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max6751$\
2488678$$, 0]}, "OtherVariables" :> {
                    Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$2488637[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], 
                    HoldAll][{$CellContext`C9780 (3 Csch[
                    $CellContext`SessionSymbol[
                    "x"]] + $CellContext`SessionSymbol[
                    "x"] (1 + $CellContext`SessionSymbol["x"]^2)^
                    Rational[1, 2] (-3 + 
                    2 $CellContext`SessionSymbol["x"]^2)), 
                    Tooltip[0, "order = 0"], 
                    Tooltip[$CellContext`C9780 (3 Csch[
                    $CellContext`SessionSymbol[
                    "x"]] + $CellContext`SessionSymbol[
                    "x"] (1 + $CellContext`SessionSymbol["x"]^2)^
                    Rational[1, 2] (-3 + 
                    2 $CellContext`SessionSymbol["x"]^2)), 
                    "order = 1"]}, {$CellContext`C9780, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min6750$$], 
                    (
                    Piecewise[{{
                    0. + 53.45224838248541 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    53.45224838248541 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min6750$$], \
-50.000000000000504`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min6750$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max6751$$]], 
                    (
                    Piecewise[{{
                    0. + 53.45224838248541 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 53.45224838248541 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min6750$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max6751$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min6750$$ + 
                    0.100000000000001, 
                    CalculateUtilities`GraphicsUtilities`Private`max6751$$]], 
                    50.000000000000504`]}, Evaluated -> True, PlotStyle -> {
                    Directive[
                    
                    RGBColor[{0.996078431372549, 0.396078431372549, 
                    0.09411764705882353}], 
                    Thickness[Large]], 
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    Thickness[Large], 
                    AbsoluteDashing[{12, 4}]], 
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    Thickness[Large], 
                    AbsoluteDashing[{12, 4, 1, 4}]]}, Filling -> {1}, 
                    FillingStyle -> Opacity[0.02], Exclusions -> {0}, 
                    ImageSize -> 330., PerformanceGoal -> "Quality"]], 
                    "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min6750$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max6751$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                    "Options" :> {
                    ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                    "DefaultOptions" :> {}], SingleEvaluation -> True], 
                    Initialization :> ({
                    ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2488637]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2488637[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    All, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines = 
                    ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2488637[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                    ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfkdgqtC9IsI6NSQNKUr7XSy6JhWsH29kGfx58dpM0a1cppgM0pR9O9aV5fPfcc9d7fiKCpN/\
r9dRNYz4IFidbeHpmzEjMclHw+P15LkEpKnhyA5/dMyYEvQ+M/IDY+\
W4bcyDkjGh3foPvExYVjGj4qimjmoKaHkqSZzRStWcs6an5yZSJiDD6E15sD3d3Xw93HAzGMiZag+\
Rqpy1knkmiIOkh0C1j9hjh39zxaXn8VDAWwvcCeATqsfFOJIkNjOCEYT7et15vph5gYprwmMj4ymmy\
8hy1vUBpSXk6gVmOb1xO1qu2wESmynHzsORmnYJc+HfwgQhtTM5jk7ZnS6BfGNeMvouy+\
ufcDfD8ti28FGericP83jHkjWh6CmqZzpet6+QYqbrWRj/\
n6qrmy0aDvHzK1P9Lx1Tp5TC224YBsxNT49XaW4YftoUXOXb9XNyPjPnsHCXgquFQCe6jiAs2j6KZ8\
sBJtH26KjcOh3G/4jtEp08FK5zAxFn2i+\
2PJxV4vSmEWLvpBqTD6xkQQA7GFVtu92lK9SgjkkQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmqNk\
oe5ER9mXPypuJZcLTYa8H3ENKci1or+\
L9ZGGXB5PhGckIV7Q1Ks3h1VSYyK9ZT8oQcKccIqQ9Jf52G/\
u4WIlkKpDieqSjsWBLc25fxL9ssDHwFOdNXdsz9Hl3baYTSDOatUFNEkWp83mmO43mW7c0BzoviT4l\
sR/oHebQrcp/NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/Sb7PSuLY="]]}; 
                    Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                    Deinitialization :> None, 
                    UntrackedVariables :> {Typeset`size$$}, 
                    SynchronousInitialization -> True, 
                    UnsavedVariables :> {Typeset`initDone$$}, 
                    UndoTrackedVariables :> {
                    Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
                   Deployed -> True, StripOnInput -> False], TraditionalForm], 
                 Manipulate`InterpretManipulate[1]]}, {
                StyleBox[
                 RowBox[{"\"(\"", "\[NoBreak]", 
                   
                   TemplateBox[{
                    "\"order \"", "n", "\" approximation shown with \"", "n", 
                    "\" dots\""}, "RowDefault"], "\[NoBreak]", "\")\""}], {
                 FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "PlotOfSeriesExpansionAtC9780 = 0__More terms"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "C", "template" -> 
        "Assuming \"C\" is a variable${separator}Use as ${desc} instead", 
        "count" -> "2", "pulldown" -> "false", "default" -> 
        "{\"C\", \"C\"} -> {\"Variable\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Variable", "desc" -> "a variable", "input" -> 
          "{\"C\", \"C\"} -> {\"Variable\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Unit", "desc" -> "a unit", "input" -> 
          "{\"C\", \"C\"} -> {\"Unit\"}"}, {}]}]}], 
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "expand P = C*((x)*(2*(x)^2 - 3)*((x)^2 + 1)^(1/2) + 3*(sinh(x))^-1)",
         "score" -> "0.7966101694915254", "level" -> "high"}, {"\n   ", 
        XMLElement[
        "alternative", {"score" -> "0.2063380281690141", "level" -> "low"}, {
         "P= C"}], "\n  "}]}]}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "5", "datatypes" -> "Expand", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "6.6770000000000005", "parsetiming" -> 
    "1.04", "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP45261df346332166ff43000046a8gf369hd3ga1b", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "17", "related" -> "", 
    "version" -> "2.6", "inputstring" -> 
    "expand P = C*((x)*(2*(x)^2 - 3)*((x)^2 + 1)^(1/2) + 3*(sinh(x))^-1)"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2023, 1, 14, 16, 23, 0.923956`7.718226279198033}, "Line" -> 59,
     "SessionID" -> 24532905973993933097}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = 
   False, Typeset`newq$$ = 
   "expand P= C*((x)*(2*(x)^2-3)*((x)^2+1)^(1/2)+3*(sinh(x))^-1) where x<<1"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1363., {484.3544921875, 489.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8826913809610324`*^9},ExpressionUUID->"744e083b-c082-4b1a-b37c-\
41c09283b4d7"]
}, Open  ]]
},
WindowSize->{1428., 735.75},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Microsoft Windows (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"2e91cfda-6df0-4c77-8e78-6ed1be521d40"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 688, 11, 41, "WolframAlphaLong",ExpressionUUID->"4af2b781-e6d5-4960-bbe8-630ad09f9305"],
Cell[1271, 35, 24993, 502, 450, "Print",ExpressionUUID->"2fbc5639-2f56-47bc-916a-afdb747078ff"]
}, Open  ]],
Cell[CellGroupData[{
Cell[26301, 542, 378, 6, 41, "WolframAlphaLong",ExpressionUUID->"3d2a29d1-39cb-4d53-aff2-0bee4d84e37e"],
Cell[26682, 550, 77852, 1536, 984, "Print",ExpressionUUID->"744e083b-c082-4b1a-b37c-41c09283b4d7"]
}, Open  ]]
}
]
*)

